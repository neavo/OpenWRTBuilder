# This is a basic workflow to help you get started with Actions
name: OpenWRTBuilder

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      VERSION_NAME:
        description: "版本名称"
        type: string
        required: true
        default: "firmware"
      REPOSITORY_URL:
        description: "Url"
        type: string
        required: true
        default: "https://github.com/coolsnowwolf/lede"
      REPOSITORY_BRANCH:
        description: "Branch"
        type: string
        required: true
        default: "master"
      REPOSITORY_COMMIT_ID:
        description: "Commit ID"
        type: string
        required: true
        default: "lastest"
      LOAD_CUSTOM_CONFIG_FILE:
        description: "配置文件"
        type: string
        required: true
        default: ".config"

env:
  REPOSITORY_URL: ${{ inputs.REPOSITORY_URL }}
  REPOSITORY_BRANCH: ${{ inputs.REPOSITORY_BRANCH }}
  REPOSITORY_COMMIT_ID: ${{ inputs.REPOSITORY_COMMIT_ID }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  workflow:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # 初始化系统
      - name: Initialization
        run: |
          sudo apt update -y
          sudo apt full-upgrade -y
          sudo apt install -y ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo apt autoremove --purge
          sudo apt clean

      # 克隆源码 STEP.01
      - name: Clone Repository STEP.01
        run: |
          git clone $REPOSITORY_URL -b $REPOSITORY_BRANCH OpenWRT

      # 克隆源码 STEP.02
      - name: Clone Repository STEP.02
        if: inputs.REPOSITORY_COMMIT_ID != 'lastest'
        run: |
          cd OpenWRT
          git checkout $REPOSITORY_COMMIT_ID

      # 克隆源码 STEP.03
      - name: Clone Repository STEP.03
        run: |
          cd OpenWRT
          sed -i "/helloworld/d" "feeds.conf.default"
          echo "src-git helloworld https://github.com/fw876/helloworld.git" >> "feeds.conf.default"
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      # 加载配置
      - name: Load Config
        run: |
          rm -rf OpenWRT/.config
          mv ${{ inputs.LOAD_CUSTOM_CONFIG_FILE }} OpenWRT/.config

      # 下载依赖
      - name: Download Package
        run: |
          cd OpenWRT
          make defconfig
          make download -j8

      # 编译固件
      - name: Compile Firmware
        run: |
          cd OpenWRT
          make -j$(nproc)

      # 上传固件
      - name: Upload Firmware
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.VERSION_NAME }}
          path: OpenWRT/bin/
